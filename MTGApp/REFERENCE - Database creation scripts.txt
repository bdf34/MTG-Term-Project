CREATE TABLE UserInfo (
	userID int IDENTITY(1,1),
	username varchar(20) NOT NULL,
	password varchar(20) NOT NULL,
	collectionNumber varchar(50) NOT NULL,
	PRIMARY KEY (userID)
)

CREATE TABLE Decks (
	deckID int IDENTITY(1,1),
	userID int NOT NULL, 
	deckName varchar(50) NOT NULL,
	format varchar(60) NOT NULL,
	color varchar(20) NOT NULL,
	commanderCardID int,
	colorIdentity varchar(10),

	PRIMARY KEY (deckID),
	FOREIGN KEY (userID) 
		REFERENCES UserInfo(userID)
		ON DELETE CASCADE
		ON UPDATE CASCADE
		
)


CREATE TABLE Suggestions(
	cardID int,
	deckID int,
	Primary Key (cardID,deckID)
)

CREATE TABLE Cards(
	cardID varchar(50) PRIMARY KEY,
	name varchar(60) NOT NULL,
	text varchar(2000),
	cost varchar(15) NOT NULL,
	convertedManaCost int NOT NULL,
	power varchar(4),
	toughness varchar(4),
	type varchar(50) NOT NULL,
	rarity varchar(3) NOT NULL,
	price varchar(10),
	imageURI varchar(200) NOT NULL,
	color varchar(20) NOT NULL,
	colorIdentity varchar(20) NOT NULL,
	attributes varchar(100),
	edhrecRank int,
	legalFormats varchar(60) NOT NULL
)

ALTER TABLE Decks
 ADD FOREIGN KEY (commanderCardID) 
		REFERENCES cards(cardID)
		ON DELETE SET NULL
		ON UPDATE CASCADE

		
		
CREATE TABLE DeckList(
	deckID int PRIMARY KEY,
	cardID varchar(50) UNIQUE,
	quantity int NOT NULL,
	collectionQuantity int NOT NULL,
	starScore varchar(4),
	reviewQuantity int DEFAULT(0),

	FOREIGN KEY (deckID)
	REFERENCES Decks(deckID)
	ON DELETE CASCADE
	ON UPDATE CASCADE
	)

ALTER TABLE DeckList
ALTER COLUMN reviewQuantity int NOT NULL;




CREATE TABLE Collection(
	collectionNumber int IDENTITY(1,1),
	cardID varchar(50) UNIQUE,
	quantity int NOT NULL,
	quantityInDecks int NOT NULL,
	quantityAvailable int NOT NULL,

	PRIMARY KEY (collectionNumber)
)

CREATE TABLE ProblemCards(
	idNumber int IDENTITY(1,1),
	deckID int,
	cardID varchar(50),
	color varchar(20),
	attributes varchar(100) ,

	PRIMARY KEY (idNumber),
	
	FOREIGN KEY (deckID)
	REFERENCES Decks(deckID)
	ON DELETE CASCADE
	ON UPDATE CASCADE
	)

ALTER TABLE ProblemCards
ADD FOREIGN KEY (cardID)
	REFERENCES Cards(cardID)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION


USE [MagicDB]
GO

/****** Object: SqlProcedure [dbo].[DeckInsert] Script Date: 12/3/2020 3:36:29 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE DeckInsert @UserID int, @Quantity int, @CardName varchar(60), @DeckName varchar(50), @Format varchar(60) 
AS

 DECLARE @CardId INT;
 DECLARE @DeckId INT;
 
 DECLARE @ExistsCount INT;

 SET @CardId = (SELECT cardID FROM Cards WHERE Cards.name = @CardName);

--First we check to see if this deck exists in the deck table. If not, create a record.
SET @ExistsCount = (SELECT COUNT(deckID) FROM Decks WHERE userID = @UserID AND deckName = @DeckName); 

IF (@ExistsCount = 0)
BEGIN
	INSERT INTO Decks VALUES (@UserID, @DeckName, @Format, 'colorless', null, null);
END

SET @DeckId = (SELECT deckID FROM Decks WHERE deckName = @DeckName);

--Check to see if this card is in the user's collection at all
SET @ExistsCount = (SELECT COUNT(cardID) FROM Collection WHERE userID = @UserID AND cardID = @CardId);
IF (@ExistsCount = 0) --if not, insert just enough to cover this addition
BEGIN
	INSERT INTO Collection VALUES (@UserID, @CardId, @Quantity, @Quantity, 0);
END

--Get collection quantity
 DECLARE @QuantityInDecks INT;
 DECLARE @QuantityAvailable INT;
 Declare @CollectionQuantity INT;

 SET @QuantityInDecks = (SELECT quantityInDecks FROM Collection WHERE cardID = @CardId AND userID = @UserID);
 SET @QuantityAvailable = (SELECT quantityAvailable FROM Collection WHERE cardID = @CardId AND userID = @UserID);
 SET @CollectionQuantity = @QuantityInDecks + @QuantityAvailable;

SET @QuantityAvailable -= @Quantity;
SET @QuantityInDecks += @Quantity;

UPDATE Collection
	SET quantityAvailable = @QuantityAvailable WHERE cardID = @CardId AND userID = @UserID;
	
UPDATE Collection
	SET quantityInDecks = @QuantityInDecks WHERE cardID = @CardId AND userID = @UserID;

--Check to see if the card being entered exists in the Deck List table. 
SET @ExistsCount = (SELECT COUNT(cardID) FROM DeckList WHERE deckID = @DeckId AND cardID = @CardId);
IF (@ExistsCount = 0)
BEGIN
	
 
	INSERT INTO DeckList VALUES (@DeckId, @CardId, @Quantity, @CollectionQuantity, 3, 0)	
END
ELSE
BEGIN
	UPDATE DeckList
	SET quantity = @Quantity WHERE deckID = @DeckId and cardID = @CardId;
END

--Determine the Color of the deck, based on the color of the cards in the deck
Declare @DeckColor varchar(20) = ' ';
If ((Select Count(*) from DeckList, Card where DeckList.deckID = @DeckId and DeckList.cardID = Card.cardID and Card.color like '%W%') > 0)
BEGIN
	SET @DeckColor += 'W';
END
If ((Select Count(*) from DeckList, Card where DeckList.deckID = @DeckId and DeckList.cardID = Card.cardID and Card.color like '%U%') > 0)
BEGIN
	SET @DeckColor += 'U';
END
If ((Select Count(*) from DeckList, Card where DeckList.deckID = @DeckId and DeckList.cardID = Card.cardID and Card.color like '%B%') > 0)
BEGIN
	SET @DeckColor += 'B';
END
If ((Select Count(*) from DeckList, Card where DeckList.deckID = @DeckId and DeckList.cardID = Card.cardID and (Card.color like '%R%' and Card.color not like '%colorless%')) > 0)
BEGIN
	SET @DeckColor += 'R';
END
If ((Select Count(*) from DeckList, Card where DeckList.deckID = @DeckId and DeckList.cardID = Card.cardID and Card.color like '%G%') > 0)
BEGIN
	SET @DeckColor += 'G';
END
If @DeckColor = ' '
BEGIN
	SET @DeckColor = 'colorless';
END

Update Decks
Set color = @DeckColor where deckID = @DeckId;

--Determine the Color Identity of the deck, based on the color identity of the cards in the deck
Declare @DeckIdentity varchar(10) = ' ';
If ((Select Count(*) from DeckList, Card where DeckList.deckID = @DeckId and DeckList.cardID = Card.cardID and Card.colorIdentity like '%W%') > 0)
BEGIN
	SET @DeckIdentity += 'W';
END
If ((Select Count(*) from DeckList, Card where DeckList.deckID = @DeckId and DeckList.cardID = Card.cardID and Card.colorIdentity like '%U%') > 0)
BEGIN
	SET @DeckIdentity += 'U';
END
If ((Select Count(*) from DeckList, Card where DeckList.deckID = @DeckId and DeckList.cardID = Card.cardID and Card.colorIdentity like '%B%') > 0)
BEGIN
	SET @DeckIdentity += 'B';
END
If ((Select Count(*) from DeckList, Card where DeckList.deckID = @DeckId and DeckList.cardID = Card.cardID and (Card.colorIdentity like '%R%' and Card.colorIdentity not like '%colorless%')) > 0)
BEGIN
	SET @DeckIdentity += 'R';
END
If ((Select Count(*) from DeckList, Card where DeckList.deckID = @DeckId and DeckList.cardID = Card.cardID and Card.colorIdentity like '%G%') > 0)
BEGIN
	SET @DeckIdentity += 'G';
END
If @DeckIdentity = ' '
BEGIN
	SET @DeckIdentity = 'colorless';
END

Update Decks
Set colorIdentity = @DeckIdentity where deckID = @DeckId;
